importClass("flixel.group.FlxGroup.FlxTypedGroup");
importClass("flixel.effects.FlxFlicker");
importClass("lime.app.Application");

importClass("Vars");
importClass("MusicBeatState");
importClass("MainMenuState");
importClass("CamFollow");
importClass("DiscordClient");

var alias = !Save.get("antialiasing");

function openState() {
}

var curSelected = 0;
var selectedSomethin = false;

var optionShit = [
    'story_mode',
    'freeplay',
    'credits',
    'donate',
    'options'
];

var menuItems = [];

var bg = null;
var magenta = null;

var versionShit = null;
var versionShit2 = null;

var camFollow = null;
var overFollow = null;

function create() {
    // Updating Discord Rich Presence
    DiscordClient.changePresence("In the Menus", null);

    bg = new FlxSprite(-80).loadGraphic(Paths.image('menuBG'));
    bg.setGraphicSize(Std.int(FlxG.width));
    bg.updateHitbox();
    bg.screenCenter();
    bg.antialiasing = !alias;
    bg.scrollFactor.set();
    add(bg);

    magenta = new FlxSprite(-80).loadGraphic(Paths.image('menuDesat'));
    magenta.setGraphicSize(Std.int(bg.width));
    magenta.updateHitbox();
    magenta.screenCenter();
    magenta.visible = false;
    magenta.scrollFactor.set();
    magenta.antialiasing = !alias;
    magenta.color = 0xFFfd719b;
    add(magenta);

    for (i in 0...optionShit.length) {
        var menuItem = new FlxSprite();
        menuItem.frames = Paths.getSparrowAtlas("main_menu/" + optionShit[i]);
        menuItem.screenCenter();
        menuItem.y = itemY(i);
        menuItem.animation.addByPrefix('idle', optionShit[i] + " basic", 24);
        menuItem.animation.addByPrefix('selected', optionShit[i] + " white", 24);
        menuItem.animation.play('idle');
        menuItem.scrollFactor.set(0, 1);
        menuItem.antialiasing = !alias;
        menuItem.ID = i;
        menuItems.push(menuItem);
        add(menuItem);
    }

    versionShit = new FlxText(5, FlxG.height - 18, 0, "  FNF v" + Application.current.meta.get('version'), 16);
    versionShit.scrollFactor.set();
    versionShit.font = Paths.font("vcr.ttf");
    setTextBorderStyle(versionShit, "outline");
    versionShit.borderColor = 0xff000000;
    add(versionShit);
    versionShit2 = new FlxText(5, FlxG.height - 38, 0, "Atrum v" + Vars.version, 16);
    versionShit2.scrollFactor.set();
    versionShit2.font = Paths.font("vcr.ttf");
    setTextBorderStyle(versionShit2, "outline");
    versionShit2.borderColor = 0xff000000;
    add(versionShit2);

    camFollow = new CamFollow(0, 0, 2);
    add(camFollow);

    overFollow = new CamFollow(0, 0, 2);
    overFollow.cameras = [cam2];
    add(overFollow);

    cam1.follow(camFollow, null);
    cam2.follow(overFollow, null);

    changeItem(0);
}

function update(dt) {

    if (FlxG.sound.music.volume < 1)
        FlxG.sound.music.volume += 0.5 * dt;

    if (!selectedSomethin)
    {
        if (Parent.getControl("up_ui")) {
            FlxG.sound.play(Paths.sound('scrollMenu'));
            changeItem(-1);
        }
        if (Parent.getControl("down_ui")) {
            FlxG.sound.play(Paths.sound('scrollMenu'));
            changeItem(1);
        }

        if (Parent.getControl("accept"))
        {
            if (optionShit[curSelected] == 'donate') {
                FlxG.openURL('https://ninja-muffin24.itch.io/funkin');
            } else {
                selectedSomethin = true;
                FlxG.sound.play(Paths.sound('confirmMenu'));

                FlxFlicker.flicker(magenta, 1.1, 0.15, false);

                for (spr in menuItems) {
                    if (curSelected != spr.ID) {
                        FlxTween.tween(spr, {alpha: 0}, 0.4, {
                            ease: FlxEase.quadOut,
                            onComplete: function(twn:FlxTween) {
                                spr.kill();
                            }
                        });
                    } else {
                        FlxFlicker.flicker(spr, 1, 0.06, false, false, function(flick:FlxFlicker) {
                            switch (optionShit[curSelected]) {
                                case 'story_mode':
                                    MusicBeatState.switchState(new StoryMenuState());
                                case 'freeplay':
                                    MusicBeatState.switchState(new FreeplayState());
                                case 'credits':
                                    MusicBeatState.switchState(new FreeplayState());
                                case 'options':
                                    while (menuItems.length > 0) {
                                        menuItems[0].kill();
                                        menuItems[0].destroy();
                                        menuItems.remove(menuItems[0]);
                                    }
                                    menuItems = [];
                                    versionShit.kill();
                                    versionShit.destroy();
                                    versionShit2.kill();
                                    versionShit2.destroy();
                                    Parent.openSubState(new OptionsSubState(false));
                            }
                        });
                    }
                };
            }
        }
    }

    for (spr in menuItems) {
        spr.screenCenter();
        spr.y = itemY(spr.ID);
    };
}

function changeItem(huh) {
    curSelected += huh;

    if (curSelected >= menuItems.length)
        curSelected = 0;
    if (curSelected < 0)
        curSelected = menuItems.length - 1;

    for (spr in menuItems) {
        spr.animation.play('idle');
        spr.cameras = [cam1];

        if (spr.ID == curSelected) {
            spr.animation.play('selected');
            overFollow.lerpTo(0, spr.getGraphicMidpoint().y + 20);
            spr.cameras = [cam2];
            camFollow.lerpTo(spr.getGraphicMidpoint().x, spr.getGraphicMidpoint().y);
        }

        spr.updateHitbox();
    }
}

function itemY(i) {
    return 60 + (i * 160);
}

function updatePost(dt) {
    if (!FlxG.sound.music.playing)
        FlxG.sound.playMusic(Paths.music('freakyMenu'));

    Conductor.songPosition = FlxG.sound.music.time;
    cam1.zoom = FlxMath.lerp(cam1.zoom, 1, (bpm / 40) * dt);
    cam2.zoom = FlxMath.lerp(cam2.zoom, 1, (bpm / 20) * dt);
    // quick reload 
    if (FlxG.keys.justPressed.F5)
        MusicBeatState.switchState(new MainMenuState());
}

function beatHit(beat) {
    if (Save.get("flashing lights")) {
        cam1.zoom = 1.02;
        cam2.zoom = 1.1;
    }
}

function add(obj) {
    Parent.add(obj);
}